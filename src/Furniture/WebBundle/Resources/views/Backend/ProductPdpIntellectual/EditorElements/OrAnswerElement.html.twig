<div id="orAnswerElementForm" title='"OR Answer" element form'>
    <form>
    <div class="row">
        <div class="col-sm-12">
            <div class="input-group input-group-sm">
                <span class="input-group-addon">Answer</span>
                <textarea id="answer" class="form-control" rows="3"></textarea>
            </div>
        </div>
    </div>
    </form>
</div>

<div id="pdpInputOrAnswerElement" type="text/template" style="display:none;">
    <div class="html-element row">
        <div class="col-sm-12">
            <div class="row">
                <div class="col-sm-4">
                    <div class="btn-group-vertical">
                        <button type="button" class="btn btn-default btn-xs delete">
                            <span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span>
                        </button>
                        <button type="button" class="btn btn-default btn-xs edit">
                            <span class="glyphicon glyphicon-wrench" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
                <div class="col-sm-8">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="center-text" style="color: #fff;">Answer</div>
                            <div class="answer-value center-text"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {

        var orAnswerElementForm = $( "#orAnswerElementForm" );

        joint.shapes.pdpInput.OrAnswer = joint.shapes.pdpInput.Element.extend(
            _.extend(
                {},
                {
                    elementType: 'Or answer',
                    defaults: joint.util.deepSupplement({
                        type: 'pdpInput.OrAnswer',
                        position: {x: 80, y: 80}, 
                        size: {width: 'auto', height: 'auto'},
                        inPorts: ['in'],
                        outPorts: ['out'],
                        attrs: {
                            '.': { magnet: false },
                            rect: { fill:'orange', stroke: 'orange', width: 300, height: 250 },
                            circle: {
                                r: 10, //port circle radius
                                magnet: true,
                                stroke: 'black'
                            },
                            '.inPorts circle': { fill: 'green', magnet: 'passive', type: 'input'},
                            '.outPorts circle': { fill: 'red', type: 'output'}
                        }
                    })
                }
            )
        );
        
        joint.shapes.pdpInput.OrAnswerView = joint.shapes.pdpInput.OrAnswerView.extend({
            template: $('#pdpInputOrAnswerElement').html(),
            updateBox: function() {
                // Set the position and dimension of the box so that it covers the JointJS element.
                var bbox = this.model.getBBox();
                this.$box.css({ width: bbox.width, height: bbox.height, left: (bbox.x+20), top: bbox.y+4, transform: 'rotate(' + (this.model.get('angle') || 0) + 'deg)' });
                this.model.attributes.attrs.rect.width = this.$box.first().width() + 15;
                this.model.attributes.attrs.rect.height = this.$box.first().height() + 10;
                joint.dia.ElementView.prototype.render.apply(this, arguments);

                this.$box.find('.answer-value').text(this.model.get('prependText'));
            },
            updateElement: function() {
                var dialog = this.updateDialogInit();
                var form = dialog.find('form');
                form.find('#answer').val(this.model.get('prependText'));
                dialog.dialog('open');
            },
            updateDialogInit: function() {
                var that = this;
                var updateDialog = orAnswerElementForm;
                var form = updateDialog.find('form');
                updateDialog.dialog({
                    autoOpen: false,
                    height: 350,
                    width: 350,
                    modal: true,
                    buttons: {
                        Update: function () {
                            var cell = graph.getCell(that.model.id);
                            if (cell) {
                                cell.prop({
                                    prependText: form.find('#answer').val(),
                                });
                                that.updateBox();
                            }
                            updateDialog.dialog("close");
                        },
                        Cancel: function () {
                            updateDialog.dialog("close");
                        }
                    },
                    close: function () {
                        form.get(0).reset();
                    }
                });

                return updateDialog;
            }
        });
        
        var createOrAnswerElement = function(parameters){
            var orEl = new joint.shapes.pdpInput.OrAnswer(parameters);
            console.log('New OR ID', orEl.id);
            graph.addCells([orEl])
        };

        var createOrAnswerElementDialog = function(ele) {
            var form = orAnswerElementForm.find( "form" );
            ele.dialog({
                autoOpen: false,
                height: 350,
                width: 350,
                modal: true,
                buttons: {
                    Add: function(){
                        createOrAnswerElement({prependText: form.find('#answer').val()});
                        ele.dialog( "close" );
                    },
                    Cancel: function() {
                        ele.dialog( "close" );
                    }
                },
                close: function() {
                    form.get(0).reset();
                }
            });
        };

        $('#addOrAnswerBtn').click(function(){
            createOrAnswerElementDialog(orAnswerElementForm);
            orAnswerElementForm.dialog('open');
        });
    });
</script>