<div id="orElementForm" title='"OR" element form.'>
    <form>
    <div class="row">
        <div class="col-sm-12">
            <div class="input-group input-group-sm">
                <span class="input-group-addon">Question</span>
                <textarea class="form-control" id="question" rows="3"></textarea>
            </div>
        </div>
    </div>
    </form>
</div>

<div id="pdpInputOrElement" type="text/template" style="display:none;">
    <div class="html-element row">
        <div class="col-sm-12">
            <div class="row">
                <div class="col-sm-4">
                    <div class="btn-group-vertical">
                        <button type="button" class="btn btn-default btn-xs delete">
                            <span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span>
                        </button>
                        <button type="button" class="btn btn-default btn-xs edit">
                            <span class="glyphicon glyphicon-wrench" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
                <div class="col-sm-8 pull-right">
                    <div class="center-text" style="color: #fff;">OR</div>
                    <div class="question-value center-text"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        var orElementForm = $( "#orElementForm" );

        joint.shapes.pdpInput.Or = joint.shapes.pdpInput.Element.extend(_.extend(
                {},
                {
                    elementType: 'Or',
                    defaults: joint.util.deepSupplement({
                        type: 'pdpInput.Or',
                        position: {x: 80, y: 80}, 
                        size: {width: 'auto', height: 'auto'},
                        inPorts: ['in'],
                        outPorts: ['out'],
                        attrs: {
                            '.': { magnet: false },
                            rect: { fill: 'tomato', stroke: 'tomato', width: 300, height: 250 },
                            circle: {
                                r: 10, //port circle radius
                                magnet: true,
                                stroke: 'black'
                            },
                            '.inPorts circle': { fill: 'green', magnet: 'passive', type: 'input'},
                            '.outPorts circle': { fill: 'red', type: 'output'}
                        }
                    })
                }
                ));
        
        joint.shapes.pdpInput.OrView = joint.shapes.pdpInput.OrView.extend({
            
            template: $('#pdpInputOrElement').html(),
            
            updateBox: function() {
                // Set the position and dimension of the box so that it covers the JointJS element.
                var bbox = this.model.getBBox();
                this.$box.css({ width: 'auto', height: 'auto', left: (bbox.x+20), top: bbox.y+4, transform: 'rotate(' + (this.model.get('angle') || 0) + 'deg)' });
                this.model.attr({
                    rect: {
                        width: this.$box.first().width() + 15,
                        height: this.$box.first().height() + 10
                    }
                });

                joint.dia.ElementView.prototype.render.apply(this, arguments);

                this.$box.find('.question-value').text(this.model.get('prependText'));
            },
            updateElement: function() {
                var dialog = this.updateDialogInit();
                var form = dialog.find('form');
                form.find('#question').val(this.model.get('prependText'));
                dialog.dialog('open');
            },
            updateDialogInit: function() {
                var that = this;
                var updateDialog = orElementForm;
                var form = updateDialog.find('form');
                updateDialog.dialog({
                    autoOpen: false,
                    height: 350,
                    width: 350,
                    modal: true,
                    buttons: {
                        Update: function () {
                            that.model.prop({
                                prependText: form.find('#question').val()
                            });
                            that.model.resize(that.$box.first().width(), that.$box.first().height());

                            updateDialog.dialog("close");
                        },
                        Cancel: function () {
                            updateDialog.dialog("close");
                        }
                    },
                    close: function () {
                        form.get(0).reset();
                    }
                });

                return updateDialog;
            }
        });
        
        var createOrElement = function(parameters){
            var orEl = new joint.shapes.pdpInput.Or(parameters);
            console.log('New OR ID', orEl.id);
            graph.addCells([orEl])
        };

        var createOrElementDialog = function(ele){
            var form = ele.find( "form" );
            ele.dialog({
                autoOpen: false,
                height: 350,
                width: 350,
                modal: true,
                buttons: {
                    Add: function(){
                        createOrElement({prependText: form.find('#question').val()});
                        ele.dialog( "close" );
                    },
                    Cancel: function() {
                        ele.dialog( "close" );
                    }
                },
                close: function() {
                    form.get(0).reset();
                }
            });
        };
        
        $('#addOrBtn').click(function(){
            createOrElementDialog(orElementForm);
            orElementForm.dialog('open');
        });
    });
</script>