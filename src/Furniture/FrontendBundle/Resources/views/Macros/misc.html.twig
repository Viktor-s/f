{% macro pagination(paginator, options) %}
{% spaceless %}
    {% if paginator.haveToPaginate()|default(false) %}
        <ul class="pagination pagination-sm pull-right">
        {% if(paginator.hasPreviousPage()) %}
            <li>
                <a href="{{ path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')|merge(app.request.query.all|merge({'page': 1 }))) }}" aria-label="Previous">
                    <span aria-hidden="true">&lsaquo;</span>
                </a>
            </li>
            <li>
                <a href="{{ path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')|merge(app.request.query.all|merge({'page': paginator.previousPage }))) }}">
                    {{ paginator.previousPage }}
                </a>
            </li>
        {% endif %}
            <li class="active">
                <a href="{{ path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')|merge(app.request.query.all|merge({'page': paginator.currentPage }))) }}">
                    {{ paginator.currentPage }}
                </a>
            </li>
        {% if(paginator.hasNextPage()) %}
            <li>
                <a href="{{ path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')|merge(app.request.query.all|merge({'page': paginator.nextPage }))) }}">
                    {{ paginator.nextPage }}
                </a>
            </li>
            {% if( paginator.currentPage == 1 and paginator.nbPages >= paginator.nextPage+1) %}
            <li>
                <a href="{{ path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')|merge(app.request.query.all|merge({'page': (paginator.nextPage+1) }))) }}">
                    {{ (paginator.nextPage+1) }}
                </a>
            </li>
            {% endif %}
            <li>
                <a href="{{ path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')|merge(app.request.query.all|merge({'page': paginator.nbPages }))) }}" aria-label="Next">
                    <span aria-hidden="true">&rsaquo;</span>
                </a>
            </li>
        {% endif %}
        </ul>
    {% endif %}
{% endspaceless %}
{% endmacro %}

{% macro sorting_select(choices, attr = {}) %}
    <select {% for attrname, attrvalue in attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
        {% for key, value in choices %}
            {% if value is iterable %}
                <optgroup label="{{ key|replace('_', ' ')|title }}" data-mode="{{ key }}">
                    {% for id, val in value %}
                        <option value="{{ id }}" {% if choices.isSelectedItem(id) %}selected{% endif %}>{{ val }}</option>
                    {% endfor %}
                </optgroup>
            {% else %}
                <option value="{{ key }}" {% if choices.isSelectedItem(key) %}selected{% endif %}>{{ value }}</option>
            {% endif %}
        {% endfor %}
    </select>
{% endmacro %}

{% macro sorting_label(label, attr = {}) %}
    <label{% for attrname, attrvalue in attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
        {{ label|trans }}
    </label>
{% endmacro %}

{% macro sorting_widget(options) %}
    {{ _self.sorting_label(options['label'], options['label_attr']) }}
    {% if options['type'] == 'select' %}
    {{ _self.sorting_select(options['choices'], options['attr']) }}
    {% endif %}
{% endmacro %}