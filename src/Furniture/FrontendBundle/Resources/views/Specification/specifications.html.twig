{% extends 'FrontendBundle:Specification:base.html.twig' %}
{% from 'FrontendBundle:Macros:misc.html.twig' import pagination %}
{% from 'FrontendBundle:Macros:specification.html.twig' import list_toolbar %}
{% use 'FrontendBundle:Specification:specifications_table.html.twig' %}

{% block title %}{{ 'frontend.title.list'|trans }} :: {{ parent() }}{% endblock %}

{% block breadcrumb %}
    {{ parent() }}
    <span class="active">{{ 'frontend.title.list'|trans }}</span>
{% endblock %}

{% block content %}
    {% set paginator = pagination(specifications) %}
    {{ list_toolbar(filters, form, paginator) }}
    {{ block('specifications_table') }}
    {{ list_toolbar(filters, form, paginator, false) }}
    <!-- Modal -->
    <div class="modal fade" id="createSpecification" tabindex="-1" role="dialog" aria-labelledby="createSpecificationLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form action="{{ path('specification_create') }}" method="POST" class="form-horizontal">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="createSpecificationLabel">{{ 'frontend.create'|trans }}</h4>
                    </div>
                    <div class="modal-body">
                        {{ form_widget(form) }}
                    </div>
                    <div class="modal-footer">
                        <div class="form-group">
                            <div class="col-sm-offset-3 col-sm-9 text-right">
                                <button type="button" class="btn btn-primary" data-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-success">{{ 'frontend.save'|trans }}</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block footer_javascripts %}
    {{ parent() }}
    <script type="text/javascript">
        $(document).ready(function () {
            // Search callback that show children nodes for optgroup.
            function modelMatcher (params, data) {
                data.parentText = data.parentText || "";

                // Always return the object if there is nothing to compare
                if ($.trim(params.term) === '') {
                    return data;
                }

                // Do a recursive check for options with children
                if (data.children && data.children.length > 0) {
                    // Clone the data object if there are children
                    // This is required as we modify the object to remove any non-matches
                    var match = $.extend(true, {}, data);

                    // Check each child of the option
                    for (var c = data.children.length - 1; c >= 0; c--) {
                        var child = data.children[c];
                        child.parentText += data.parentText + " " + data.text;

                        var matches = modelMatcher(params, child);

                        // If there wasn't a match, remove the object in the array
                        if (matches == null) {
                            match.children.splice(c, 1);
                        }
                    }

                    // If any children matched, return the new object
                    if (match.children.length > 0) {
                        return match;
                    }

                    // If there were no matching children, check just the plain object
                    return modelMatcher(params, match);
                }

                // If the typed-in term matches the text of this term, or the text from any
                // parent term, then it's a match.
                var original = (data.parentText + ' ' + data.text).toUpperCase();
                var term = params.term.toUpperCase();


                // Check if the text contains the term
                if (original.indexOf(term) > -1) {
                    return data;
                }

                // If it doesn't contain the term, don't return anything
                return null;
            }

            //Formatting selected item.
            function formatSelection(item) {
                if ($(item.element).parent('optgroup').length > 0) {
                    return $('<span>' + item.text + '<i>(' + $(item.element).parent('optgroup').attr('label') + ')</i></span>');
                }
                return $('<span>' + item.text + '</span>');
            }

            var $select2 = $('select[name="filter"]').select2({
                matcher: modelMatcher,
                minimumResultsForSearch: {{ app.user.retailerUserProfile.isRetailerAdmin ? 10 : 'Infinity' }},
                dropdownAutoWidth : true,
                templateSelection: formatSelection
            });

            $select2.on('change', function (e) {
                var value = $(this).val();
                var name = this.name;
                var query = {};

                if (-1 !== value.search('__')) {
                    var arr = value.split('__');
                    query[name] = arr[0];
                    query['filter_user'] = arr[1];
                }
                else {
                    query[name] = value;
                }

                window.location = window.location.origin + window.location.pathname + '?' + $.param(query)
            });

            $.each($select2, function(idx, val) {
                $(val).data('select2').$dropdown.addClass('filter-dropdown')
            });
        })
    </script>
{% endblock %}
